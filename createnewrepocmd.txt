c:\Users\Someone>

c:\Users\Someone> cd Music  <!-- C hange D irectory to Music Folder -->
c:\Users\Someone\Music>     <!-- Navigated to inside Music folder -->

c:\Users\Someone\Music> mkdir test_repo  <!-- M ake D irectory 'test-repo' (Folder) -->
c:\Users\Someone\Music>     <!-- 'test-repo' Folder Made inside Music folder -->

c:\Users\Someone\Music> cd test_repo  <!-- C hange D irectory to 'test-repo' (Folder) -->
c:\Users\Someone\Music\test-repo> <!-- Navigated to inside 'test-repo' (Folder) -->

c:\Users\Someone\Music\test-repo> git init <!-- Git Initialize, Because folder test_repo is initialized with Git and is now a Git Repository 
                                                any files you create and save changes within it now is seen by Git -->

c:\Users\Someone\Music\test-repo>          <!-- Make sure that you are in the right directory (test repo) before doing any git commands -->
c:\Users\Someone\Music\test-repo> git commit <!-- Works as you can see below because you are in the right directory (Git Initialize)
On Branch Master <!-- or Main, or your custom name -->
Initial commit
Nothing to commit

c:\Users\Someone\Music\test-repo> cd .. <!-- C hange D irectory back (.. means back to the parent directory) -->
c:\Users\Someone\Music>                 <!-- Back one folder (You can go back but only one directory/folder at a time 
c:\Users\Someone>

c:\Users\Someone> git commit <!-- Error because this directory is not Git Initialized and therefore not a git repository -->
fatal: not a git repository (or any of the parent repositories) .git

c:\Users\Someone> cd Music              <!-- You can go up 'cd' also  but only one at a time -->
c:\Users\Someone\Music> cd test_repo
c:\Users\Someone\Music\test_repo>

<!-- if you check the Music folder you will see the test-repo folder just made using cmd.
    open the test-repo folder and right click in the space then open with VSCode.
    It will open with VSCode and here you can create new files e.g. Readme.md, about.txt, testcode.html, etc.
    These files will be automatically updated inside the test-repo folder as you save them. Shortcut ctrl+s. -->


c:\Users\Someone\Music\test_repo> git add readme.md <!-- Add file  readme.md or any, to the 
                                                        'STAGE' Area in Git means just add to this area/folder ready to commit
                                                        but 'NOT' commit ed yet. -->
c:\Users\Someone\Music\test_repo> <!-- nothing wrong happens here as it is successfully added to the 'stage' area -->

c:\Users\Someone\Music\test_repo> git status <!-- to check after what we just did check the status of git -->

C:\Users\Someone\Music\test_repo> git status
On branch main
No commits yet
Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   readme.md                       <!-- because this file we added to the 'stage' area -->

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        create new repo cmd.txt                        <!-- because this file we did NOT add to the 'stage' area -->
                                                    <!-- do not have spaces in the file name -->

C:\Users\Someone\Music\test_repo> git add create new repo cmd.txt
fatal: pathspec 'create' did not match any files
<!-- I renamed the create new repo cmd.txt to createnewrepocmd.txt without any spaces -->

c:\Users\Someone\Music\test_repo> git add createnewrepocmd.txt

c:\Users\Someone\Music\test_repo> git status        <!-- to check after what we just did check the status of git -->

C:\Users\Someone\Music\test_repo> git status        <!-- result -->
On branch main
No commits yet
Changes to be committed:
  (use "git rm --cached <file>..." to unstage)      <!-- Note (use "git rm --cached <file>..." to unstage) -->
        new file:   createnewrepocmd.txt
        new file:   readme.md
    
    C:\Users\Someone\Music\test_repo> git commit -m"added readme.md and createanewrepo.txt
[main (root-commit) 5770be7] added readme.md and createanewrepo.txt <!-- note commit id -->
 2 files changed, 46 insertions(+)                                  <!-- more technical info -->
 create mode 100644 createnewrepocmd.txt
 create mode 100644 readme.md

<!-- we commited what we had in the staging area. -->

C:\Users\someone\Music\test_repo> git status <!-- lets check the staging area and git -->
On branch main
nothing to commit, working tree clean       <!-- because we checked the staging area and git just after and just before any activity. -->

C:\Users\Someone\Music\test_repo>             <!-- we made changes to a file and saved the changes, nothing else, like add to stage etc. -->
C:\Users\Someone\Music\test_repo> git commit  
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   createnewrepocmd.txt    <!-- remember we made changes to the file. It recognised the file is modified -->
no changes added to commit (use "git add" and/or "git commit -a")

<!-- something that happened earlier ( Im actually using cmd along with making notes in createnewrepocmd.txt )--> 
C:\Users\Someone\Music\test_repo>git commit   <!-- interesting !!!! -->
[main fdd6214] commiting bcos cmd prompted
 1 file changed, 38 insertions(+)

c:\Users\Someone\Music\test_repo> git add . <!-- add space . , . means everything in the repository, for individual files we have to name them -->

c:\Users\Someone\Music\test_repo> git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   createnewrepocmd.txt

C:\Users\Someone\Music\test_repo> git commit -m "made final changes" <!-- -m "" means message. It made me add a message earlier when I forgot-->"
[main 098442f] made final changes
 1 file changed, 17 insertions(+)

C:\Users\Someone\Music\test_repo>

<!-- from here on watch from 24:24 in the youtube video -->